{
    "summary": "The AccessibilityNodeInfoDumper class in Android generates an XML dump of accessibility node information using Java libraries. It handles exceptions, allows customization, and recursively identifies non-accessibility friendly controls, removing invalid XML characters from CharSequence inputs.",
    "details": [
        {
            "comment": "This Java class, named AccessibilityNodeInfoDumper, appears to be responsible for dumping accessibility node information in a text file. It uses various Android and Java libraries such as Log, XmlSerializer, FileWriter, and StringWriter. The code snippet also mentions Environment, but its usage is unclear. Additionally, the class seems to be hidden, denoted by \"@hide\".",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":0-35",
            "content": "/*\n * Copyright (C) 2012 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage ai.lazero.lazero;\nimport android.os.Environment;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.util.Xml;\nimport android.view.accessibility.AccessibilityNodeInfo;\nimport org.xmlpull.v1.XmlSerializer;\n// does not seems to be an issue?\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.StringWriter;\n///**\n// *\n// * @hide\n// */\npublic class AccessibilityNodeInfoDumper {"
        },
        {
            "comment": "This code defines a class for dumping the accessibility node information of an Android application into an XML file located at /data/local/window_dump.xml. It takes the root accessibility node, device rotation, width, and height as input parameters. The method also creates the base directory if it doesn't exist.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":37-55",
            "content": "    private static final String LOGTAG = AccessibilityNodeInfoDumper.class.getSimpleName();\n    private static final String[] NAF_EXCLUDED_CLASSES = new String[] {\n            android.widget.GridView.class.getName(), android.widget.GridLayout.class.getName(),\n            android.widget.ListView.class.getName(), android.widget.TableLayout.class.getName()\n    };\n    /**\n     * Using {@link AccessibilityNodeInfo} this method will walk the layout hierarchy\n     * and generates an xml dump into the /data/local/window_dump.xml\n     * @param root The root accessibility node.\n     * @param rotation The rotaion of current display\n     * @param width The pixel width of current display\n     * @param height The pixel height of current display\n     */\n    public static void dumpWindowToFile(AccessibilityNodeInfo root, int rotation,\n                                        int width, int height) {\n        File baseDir = new File(Environment.getDataDirectory(), \"local\");\n        if (!baseDir.exists()) {\n            baseDir.mkdir();"
        },
        {
            "comment": "This code is setting permissions for a base directory and then calling a method to dump the window layout hierarchy information into an XML file. The `dumpWindowToString` method generates this XML dump based on the provided accessibility node, dump file, rotation, width, and height parameters. If the root node is null, it returns null.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":56-79",
            "content": "            baseDir.setExecutable(true, false);\n            baseDir.setWritable(true, false);\n            baseDir.setReadable(true, false);\n        }\n        dumpWindowToFile(root,\n                new File(new File(Environment.getDataDirectory(), \"local\"), \"window_dump.xml\"),\n                rotation, width, height);\n    }\n    /**\n     * Using {@link AccessibilityNodeInfo} this method will walk the layout hierarchy\n     * and generates an xml dump to the location specified by <code>dumpFile</code>\n     * @param root The root accessibility node.\n     * @param dumpFile The file to dump to.\n     * @param rotation The rotaion of current display\n     * @param width The pixel width of current display\n     * @param height The pixel height of current display\n     */\n    public static String dumpWindowToString(AccessibilityNodeInfo root, int rotation,\n                                        int width, int height) {\n        if (root == null) {\n            return null;\n        }\n        final long startTime = SystemClock.uptimeMillis();"
        },
        {
            "comment": "This code snippet is trying to dump the Android AccessibilityNodeInfo hierarchy into a file. It initializes a StringWriter and XmlSerializer, sets the output format, starts tagging the hierarchy with rotation attribute, recursively dumps child nodes, ends the hierarchy tag, and returns the serialized string or logs an error if failed.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":80-103",
            "content": "        try {\n//            FileWriter writer = new FileWriter(dumpFile);\n            XmlSerializer serializer = Xml.newSerializer();\n            StringWriter stringWriter = new StringWriter();\n            serializer.setOutput(stringWriter);\n            serializer.startDocument(\"UTF-8\", true);\n            serializer.startTag(\"\", \"hierarchy\");\n            serializer.attribute(\"\", \"rotation\", Integer.toString(rotation));\n            dumpNodeRec(root, serializer, 0, width, height);\n            serializer.endTag(\"\", \"hierarchy\");\n            serializer.endDocument();\n            return stringWriter.toString();\n//            writer.write(stringWriter.toString());\n//            writer.close();\n        } catch (IOException e) {\n            Log.e(LOGTAG, \"failed to dump window to file\", e);\n        }\n        final long endTime = SystemClock.uptimeMillis();\n        Log.w(LOGTAG, \"Fetch time: \" + (endTime - startTime) + \"ms\");\n        return null;\n    }\n    public static void dumpWindowToFile(AccessibilityNodeInfo root, File dumpFile, int rotation,"
        },
        {
            "comment": "This code dumps the Android accessibility node information to a file. It checks if the root is null, then measures execution time and writes the dumped data to a file using XmlSerializer and FileWriter.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":104-126",
            "content": "                                        int width, int height) {\n        if (root == null) {\n            return;\n            //my first line from remote machine to this server.\n        }\n        final long startTime = SystemClock.uptimeMillis();\n        try {\n            FileWriter writer = new FileWriter(dumpFile);\n            XmlSerializer serializer = Xml.newSerializer();\n            StringWriter stringWriter = new StringWriter();\n            serializer.setOutput(stringWriter);\n            serializer.startDocument(\"UTF-8\", true);\n            serializer.startTag(\"\", \"hierarchy\");\n            serializer.attribute(\"\", \"rotation\", Integer.toString(rotation));\n            dumpNodeRec(root, serializer, 0, width, height);\n            serializer.endTag(\"\", \"hierarchy\");\n            serializer.endDocument();\n            writer.write(stringWriter.toString());\n            writer.close();\n        } catch (IOException e) {\n            Log.e(LOGTAG, \"failed to dump window to file\", e);\n        }\n        final long endTime = SystemClock.uptimeMillis();"
        },
        {
            "comment": "The code measures the time taken to dump the AccessibilityNodeInfo and writes the XML representation of the hierarchy to a file. It uses XmlSerializer to format the output, and a FileWriter to write the string content to the specified file.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":127-147",
            "content": "        Log.w(LOGTAG, \"Fetch time: \" + (endTime - startTime) + \"ms\");\n    }\n//    public static void dumpWindowToString(AccessibilityNodeInfo root,StringBuilder sb,int  rotation,\n//                                        int width, int height) {\n//        if (root == null) {\n//            return;\n//        }\n//        final long startTime = SystemClock.uptimeMillis();\n//        try {\n//            FileWriter writer = new FileWriter(dumpFile);\n//            XmlSerializer serializer = Xml.newSerializer();\n//            StringWriter stringWriter = new StringWriter();\n//            serializer.setOutput(stringWriter);\n//            serializer.startDocument(\"UTF-8\", true);\n//            serializer.startTag(\"\", \"hierarchy\");\n//            serializer.attribute(\"\", \"rotation\", Integer.toString(rotation));\n//            dumpNodeRec(root, serializer, 0, width, height);\n//            serializer.endTag(\"\", \"hierarchy\");\n//            serializer.endDocument();\n//            writer.write(stringWriter.toString());\n//            writer.close();"
        },
        {
            "comment": "The code snippet is part of a function that dumps accessibility information for a node to an XML file. It checks if the node should be excluded or not and adds relevant attributes such as index, text, resource-id, class, and package name to the XML file. If any IOExceptions occur during the dumping process, they are logged with error level. The time taken to fetch information is also logged with warning level.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":148-164",
            "content": "//        } catch (IOException e) {\n//            Log.e(LOGTAG, \"failed to dump window to file\", e);\n//        }\n//        final long endTime = SystemClock.uptimeMillis();\n//        Log.w(LOGTAG, \"Fetch time: \" + (endTime - startTime) + \"ms\");\n//    }\n    private static void dumpNodeRec(AccessibilityNodeInfo node, XmlSerializer serializer,int index,\n                                    int width, int height) throws IOException {\n        serializer.startTag(\"\", \"node\");\n        if (!nafExcludedClass(node) && !nafCheck(node))\n            serializer.attribute(\"\", \"NAF\", Boolean.toString(true));\n        serializer.attribute(\"\", \"index\", Integer.toString(index));\n        serializer.attribute(\"\", \"text\", safeCharSeqToString(node.getText()));\n        serializer.attribute(\"\", \"resource-id\", safeCharSeqToString(node.getViewIdResourceName()));\n        serializer.attribute(\"\", \"class\", safeCharSeqToString(node.getClassName()));\n        serializer.attribute(\"\", \"package\", safeCharSeqToString(node.getPackageName()));"
        },
        {
            "comment": "This code is setting various attributes of an AccessibilityNodeInfo object such as checkable, checked, clickable, enabled, focusable, focused, scrollable, long-clickable, password, and selected using the serializer attribute method. The try-catch block is used to handle any exceptions while converting the node to a string.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":165-176",
            "content": "        serializer.attribute(\"\", \"content-desc\", safeCharSeqToString(node.getContentDescription()));\n        serializer.attribute(\"\", \"checkable\", Boolean.toString(node.isCheckable()));\n        serializer.attribute(\"\", \"checked\", Boolean.toString(node.isChecked()));\n        serializer.attribute(\"\", \"clickable\", Boolean.toString(node.isClickable()));\n        serializer.attribute(\"\", \"enabled\", Boolean.toString(node.isEnabled()));\n        serializer.attribute(\"\", \"focusable\", Boolean.toString(node.isFocusable()));\n        serializer.attribute(\"\", \"focused\", Boolean.toString(node.isFocused()));\n        serializer.attribute(\"\", \"scrollable\", Boolean.toString(node.isScrollable()));\n        serializer.attribute(\"\", \"long-clickable\", Boolean.toString(node.isLongClickable()));\n        serializer.attribute(\"\", \"password\", Boolean.toString(node.isPassword()));\n        serializer.attribute(\"\", \"selected\", Boolean.toString(node.isSelected()));\n        try{serializer.attribute(\"\", \"toString\", node.toString());}catch(Exception e){"
        },
        {
            "comment": "This code segment appears to be part of a recursive function that dumps information about Android AccessibilityNodeInfo objects. It handles potential exceptions when converting the node to a string, logs an error message, and then proceeds to serialize the bounds attribute for the current node. The code then moves on to iterate through child nodes, skipping invisible ones and logging errors for null children.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":177-197",
            "content": "            serializer.attribute(\"\", \"toString\", \"\");\n            Log.e(\"ACCESSIBILITY NODE DUMPER\",\"node to string failed.\");\n            Log.e(\"ACCESSIBILITY NODE DUMPER\",e.toString());\n        }\n        // what the fuck is going on?\n        serializer.attribute(\"\", \"bounds\", AccessibilityNodeInfoHelper.getVisibleBoundsInScreen(\n                node, width, height).toShortString());\n        int count = node.getChildCount();\n        for (int i = 0; i < count; i++) {\n            AccessibilityNodeInfo child = node.getChild(i);\n            if (child != null) {\n//                if (child.isVisibleToUser()) {\n                    dumpNodeRec(child, serializer, i, width, height);\n                    child.recycle();\n//                } else {\n//                    Log.i(LOGTAG, String.format(\"Skipping invisible child: %s\", child.toString()));\n//                }\n            } else {\n                Log.i(LOGTAG, String.format(\"Null child %d/%d, parent: %s\",\n                        i, count, node.toString()));\n            }"
        },
        {
            "comment": "This code checks for AccessibilityNodeInfo nodes that are not accessibility friendly (NAF) by excluding certain classes and searching for enabled, clickable controls with no text or content description. If found, these NAF controls may indicate an issue in the UI's accessibility.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":198-225",
            "content": "        }\n        serializer.endTag(\"\", \"node\");\n    }\n    /**\n     * The list of classes to exclude my not be complete. We're attempting to\n     * only reduce noise from standard layout classes that may be falsely\n     * configured to accept clicks and are also enabled.\n     *\n     * @param node\n     * @return true if node is excluded.\n     */\n    private static boolean nafExcludedClass(AccessibilityNodeInfo node) {\n        String className = safeCharSeqToString(node.getClassName());\n        for(String excludedClassName : NAF_EXCLUDED_CLASSES) {\n            if(className.endsWith(excludedClassName))\n                return true;\n        }\n        return false;\n    }\n    /**\n     * We're looking for UI controls that are enabled, clickable but have no\n     * text nor content-description. Such controls configuration indicate an\n     * interactive control is present in the UI and is most likely not\n     * accessibility friendly. We refer to such controls here as NAF controls\n     * (Not Accessibility Friendly)\n     *"
        },
        {
            "comment": "This code checks if a given AccessibilityNodeInfo is Not A Friendly (NAF) by verifying its clickability, enablement, empty content description, and empty text. If it's NAF, it further checks its children to ensure the layout meets accessibility requirements.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":226-248",
            "content": "     * @param node\n     * @return false if a node fails the check, true if all is OK\n     */\n    private static boolean nafCheck(AccessibilityNodeInfo node) {\n        boolean isNaf = node.isClickable() && node.isEnabled()\n                && safeCharSeqToString(node.getContentDescription()).isEmpty()\n                && safeCharSeqToString(node.getText()).isEmpty();\n        if (!isNaf)\n            return true;\n        // check children since sometimes the containing element is clickable\n        // and NAF but a child's text or description is available. Will assume\n        // such layout as fine.\n        return childNafCheck(node);\n    }\n    /**\n     * This should be used when it's already determined that the node is NAF and\n     * a further check of its children is in order. A node maybe a container\n     * such as LinerLayout and may be set to be clickable but have no text or\n     * content description but it is counting on one of its children to fulfill\n     * the requirement for being accessibility friendly by having one or more of"
        },
        {
            "comment": "The `childNafCheck` function checks if a given `AccessibilityNodeInfo` has acceptable children for accessibility purposes. It iterates through the node's child count, and for each child, it checks if either the content description or text is not empty. If any child passes this check or any descendant node passes the `childNafCheck`, the function returns true; otherwise, it returns false. The `safeCharSeqToString` function converts a CharSequence into a string, returning an empty string if the CharSequence is null and stripping invalid XML characters from the string.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":249-279",
            "content": "     * its children fill the text or content-description. Such a combination is\n     * considered by this dumper as acceptable for accessibility.\n     *\n     * @param node\n     * @return false if node fails the check.\n     */\n    private static boolean childNafCheck(AccessibilityNodeInfo node) {\n        try{\n        int childCount = node.getChildCount();\n        for (int x = 0; x < childCount; x++) {\n            AccessibilityNodeInfo childNode = node.getChild(x);\n            if (!safeCharSeqToString(childNode.getContentDescription()).isEmpty()\n                    || !safeCharSeqToString(childNode.getText()).isEmpty())\n                return true;\n            if (childNafCheck(childNode))\n                return true;\n        }\n        return false;}\n        catch(Exception e){\n            Log.e(\"Child NAF\",e.toString());\n            return false;\n        }\n    }\n    private static String safeCharSeqToString(CharSequence cs) {\n        if (cs == null)\n            return \"\";\n        else {\n            return stripInvalidXMLChars(cs);"
        },
        {
            "comment": "This code snippet is stripping out invalid XML characters from a given CharSequence. It iterates over each character in the sequence and checks if it falls within any of the specified ranges of invalid XML characters, removing those that do.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":280-302",
            "content": "        }\n    }\n    private static String stripInvalidXMLChars(CharSequence cs) {\n        StringBuffer ret = new StringBuffer();\n        char ch;\n        // it is not caring about incomplete info.\n        // how about sending a java object?\n        /* http://www.w3.org/TR/xml11/#charsets\n        [#x1-#x8], [#xB-#xC], [#xE-#x1F], [#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFDDF],\n        [#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],\n        [#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],\n        [#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],\n        [#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],\n        [#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],\n        [#x10FFFE-#x10FFFF].\n         */\n        // might be useful but don't know how to do this.\n        for (int i = 0; i < cs.length(); i++) {\n            ch = cs.charAt(i);\n            if((ch >= 0x1 && ch <= 0x8) || (ch >= 0xB && ch <= 0xC) || (ch >= 0xE && ch <= 0x1F) ||\n                    (ch >= 0x7F && ch <= 0x84) || (ch >= 0x86 && ch <= 0x9f) ||"
        },
        {
            "comment": "This code checks if the character falls within a range of Unicode surrogate characters and appends '.' if it does, otherwise appends the character itself. The purpose might be related to handling special characters or surrogates in strings.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_android_doc/src/app/src/main/java/ai/lazero/lazero/AccessibilityNodeInfoDumper.java\":303-318",
            "content": "                    (ch >= 0xFDD0 && ch <= 0xFDDF) || (ch >= 0x1FFFE && ch <= 0x1FFFF) ||\n                    (ch >= 0x2FFFE && ch <= 0x2FFFF) || (ch >= 0x3FFFE && ch <= 0x3FFFF) ||\n                    (ch >= 0x4FFFE && ch <= 0x4FFFF) || (ch >= 0x5FFFE && ch <= 0x5FFFF) ||\n                    (ch >= 0x6FFFE && ch <= 0x6FFFF) || (ch >= 0x7FFFE && ch <= 0x7FFFF) ||\n                    (ch >= 0x8FFFE && ch <= 0x8FFFF) || (ch >= 0x9FFFE && ch <= 0x9FFFF) ||\n                    (ch >= 0xAFFFE && ch <= 0xAFFFF) || (ch >= 0xBFFFE && ch <= 0xBFFFF) ||\n                    (ch >= 0xCFFFE && ch <= 0xCFFFF) || (ch >= 0xDFFFE && ch <= 0xDFFFF) ||\n                    (ch >= 0xEFFFE && ch <= 0xEFFFF) || (ch >= 0xFFFFE && ch <= 0xFFFFF) ||\n                    (ch >= 0x10FFFE && ch <= 0x10FFFF))\n                ret.append(\".\");\n            else\n                ret.append(ch);\n        }\n        return ret.toString();\n    }\n}"
        }
    ]
}